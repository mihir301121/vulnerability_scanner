import requests
from bs4 import BeautifulSoup
import re

def fetch_cve_data(cve_id):
    """
    Fetch CVE data from the CVE Details website.

    Args:
    - cve_id (str): CVE ID of the vulnerability.

    Returns:
    - dict: Dictionary containing description, CVSS score, published date, update date, and exploitability score of the vulnerability.
    """
    url = f"https://www.cvedetails.com/cve/{cve_id}/"
    response = requests.get(url)
    if response.status_code != 200:
        print(f"Failed to fetch CVE data for {cve_id}")
        return None

    soup = BeautifulSoup(response.content, "html.parser")
    cve_data = {}
    cve_data["description"] = soup.find("div", {"id": "cvssscorestable"}).find_next("td").get_text(strip=True)
    cve_data["cvss_score"] = soup.find("span", {"id": "cvssscore"}).get_text(strip=True)
    cve_data["published_date"] = soup.find("span", text="Publish Date:").find_next("span").get_text(strip=True)
    cve_data["update_date"] = soup.find("span", text="Update Date:").find_next("span").get_text(strip=True)
    cve_data["exploitability_score"] = soup.find("span", text="Exploit Score:").find_next("span").get_text(strip=True)
    return cve_data

def scan_website(url):
    """
    Scan a website for known vulnerabilities.

    Args:
    - url (str): URL of the website to scan.
    """
    response = requests.get(url)
    if response.status_code != 200:
        print(f"Failed to fetch {url}")
        return

    soup = BeautifulSoup(response.content, "html.parser")

    # Find and extract links to vulnerability details pages
    vulnerability_links = set()
    for link in soup.find_all("a", href=re.compile(r"cve/CVE-\d{4}-\d+")):
        vulnerability_links.add(link["href"])

    # Fetch and display vulnerability information for each link
    for link in vulnerability_links:
        cve_id = link.split("/")[-1]
        cve_data = fetch_cve_data(cve_id)
        if cve_data:
            print(f"Vulnerability: {cve_id}")
            print(f"Description: {cve_data['description']}")
            print(f"CVSS Score: {cve_data['cvss_score']}")
            print(f"Published Date: {cve_data['published_date']}")
            print(f"Update Date: {cve_data['update_date']}")
            print(f"Exploitability Score: {cve_data['exploitability_score']}")
            print("")

def main():
    """
    Main function to scan a website for vulnerabilities.
    """
    url = "https://example.com"
    scan_website(url)

if __name__ == "__main__":
    main()
